extends layout.pug
block content
    #map
    #leg_title 
        span#leg_items Controls
    #leg
        button.btn.btn-primary(type='submit')(id='unionButton') Union
        button.btn.btn-primary(type='submit')(id='intersectButton') Intersect

    script(type='text/javascript').
        //- styling for feature shapes
        var stylelayer = {
            original: {
                color: "red",
                opacity: 1,
                fillcolor: "red",
                fillOpacity: 0.1,
                weight: 0.5
            },
            reset: {
                color: "red",
                opacity: 0.4,
                weight: 1
            },
            highlight: {
                weight: 5,
                color: '#0D8BE7',
                dashArray: '',
                fillOpacity: 0.7
            },
            selected: {
                color: "blue",
                opacity: 0.3,
                weight: 0.5
            }
        };

        var selectedFeatures = [];
        const maxNumFeaturesToSelect = 2;

        //- create leaflet map
        var map = L.map('map').setView([#{lat},#{lng}], 14);
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        reloadMap();

        //- adds visible features from database to map (could be reused in the future for reloading map after each union/intersect to match the database)
        function reloadMap() {
            console.log("Reloading map!");
            $.getJSON('/mapjson', {}, function(data){
                $.each(data, function(i, feature) {
                    addFeatureToMap(feature); 
                });
            });
        }
        
        //- adds feature to map (currently only supports Polygons and MultiPolygons)
        function addFeatureToMap(inputFeature) {
            if (inputFeature.geometry.type == "Polygon" || inputFeature.geometry.type == "MultiPolygon")  {
                var feature = L.geoJson(inputFeature.geometry, {
                    style: stylelayer.original,
                    onEachFeature: onEachFeature
                });
                feature.addTo(map);
            }
        }

        //- changes colors for each feature to be highlighted/unhighlighted depending on mouse event
        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: selectFeature
            });
        }

        function highlightFeature(e) {
            var layer = e.target;
            layer.setStyle(stylelayer.highlight);
        }

        function resetHighlight(e) {
            var layer = e.target;
            var feature = e.target.feature;
            if (selectedFeatures.includes(feature)) {
                setStyleLayer(layer, stylelayer.highlight);
            } 
            else {
                setStyleLayer(layer, stylelayer.original);
            }
        }

        function selectFeature(e) {
            var layer = e.target;
            var feature = e.target.feature;

            if (selectedFeatures.includes(feature)) {
                removeSelection(feature, setStyleLayer, layer, stylelayer.original);

            } else {
                addSelection(feature, setStyleLayer, layer, stylelayer.highlight);
            }
        }

        //- changes styling of this layer
        function setStyleLayer(layer, styleSelected) {
            layer.setStyle(styleSelected);
        }

        //- adds feature as one of the currently selected features
        function addSelection(feature, callback) {
            if (selectedFeatures.length < maxNumFeaturesToSelect) {
                selectedFeatures.push(feature);
                callback(arguments[2], arguments[3]);
            }
            else {
                window.confirm("You can only select " + maxNumFeaturesToSelect + " features at a time.");
            }
        }

        //- removes feature as one of the currently selected features
        function removeSelection(feature, callback) {
            selectedFeatures = selectedFeatures.filter(obj => obj.geometry.coordinates != feature.geometry.coordinates);
            callback(arguments[2], arguments[3]);
        }

        //- add union and intersect functionalities
        document.getElementById("unionButton").onclick = function(){manipulatePolygons(turf.union);};
        document.getElementById("intersectButton").onclick = function(){manipulatePolygons(turf.intersect);};

        //- performs inputFunc on currently selected polygons and adds the result to the database and map
        function manipulatePolygons(inputFunc) {
            if (selectedFeatures.length != maxNumFeaturesToSelect) {
                window.confirm("You must select " + maxNumFeaturesToSelect + " features to perform this operation");
            }

            else {
                var poly1 = selectedFeatures[0];
                var poly2;
                for (i = 1; i < selectedFeatures.length; i++) {
                    poly2 = selectedFeatures[i];
                    poly1 = inputFunc(poly1, poly2);
                }
                //- add new union polygon to database
                addFeatureToDatabase(poly1);
                addFeatureToMap(poly1);

                //- hide selected polygons (but keep them in database)
                selectedFeatures.forEach(function(feature) {
                    hideFeatureInDatabase(feature);
                    //- hideFeatureInMap(feature);
                });

                //- unselect all previously selected polygons
                selectedFeatures = [];
            }
        }

        //- adds a new feature to database via POST request to express
        function addFeatureToDatabase(feature) {
            $.ajax({
                url: '/addFeature', 
                type: 'POST', 
                contentType: 'application/json', 
                data: JSON.stringify(feature)}
            );
        }

        //- hides visibility of a feature in database via POST request to express
        function hideFeatureInDatabase(feature) {
            $.ajax({
                url: '/hideFeature', 
                type: 'POST', 
                contentType: 'application/json', 
                data: JSON.stringify(feature)}
            );
        }

        //- hide visibility of a feature on map via POST request to express; TODO: fix issue with removeLayer()
        //- function hideFeatureInMap(feature) {
        //-     console.log(map);
        //-     if (map.hasLayer(feature)) {
        //-         map.removeLayer(feature, function() {
        //-             console.log("Successfully hid " + feature);
        //-         });
        //-     }
        //- }
        
