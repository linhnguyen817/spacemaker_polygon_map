extends layout.pug
block content
    #map
    #leg_title 
        span#leg_items Controls
    #leg
        each polygon, i in jmap
            input(id=polygon._id)(type='checkbox', checked)
            span#leg_items #{polygon._id}
            br

    script(type='text/javascript').
        var stylelayer = {
            original: {
                color: "red",
                opacity: 1,
                fillcolor: "red",
                fillOpacity: 0.1,
                weight: 0.5
            },
            reset: {
                color: "red",
                opacity: 0.4,
                weight: 1
            },
            highlight: {
                weight: 5,
                color: '#0D8BE7',
                dashArray: '',
                fillOpacity: 0.7
            },
            selected: {
                color: "blue",
                opacity: 0.3,
                weight: 0.5
            }
        };

        var featuresSelected = [];

        var map = L.map('map').setView([#{lat},#{lng}], 14);
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        //- add visible polygon layer
        $.getJSON('/mapjson', {}, function(data){
                console.log(data);
             $.each(data, function(i, polygon) {
                addPolygon(polygon.geometry, "polygon_" + polygon._id); 

             });
        });
        
        function addPolygon(inputPolygon, name) {
            var polygon;
            if (inputPolygon.type == "Polygon")  {
                polygon = L.geoJson(inputPolygon, {
                    style: stylelayer.original,
                    onEachFeature: onEachFeature //- add area highlight feature with mouse hover
                });
            }
            polygon.addTo(map);
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight
                click : selectFeature
            });
        }

        function highlightFeature(e) {
            var layer = e.target;
            layer.setStyle(stylelayer.highlight);
        }


        function resetHighlight(e) {
            var layer = e.target;
            var feature = e.target.feature;
            if (checkExistsLayers(feature)) {
                setStyleLayer(layer, stylelayer.highlight)
            } 
            else {
                setStyleLayer(layer, stylelayer.original)
            }
        }

        function checkExistsLayers(feature) {
            var result = false
            for (var i = 0; i < featuresSelected.length; i++) {
                if (featuresSelected[i]._id == feature._id) {
                    result = true;
                    break;
                }
            };
            return result
        }

        function setStyleLayer(layer, styleSelected) {
            layer.setStyle(styleSelected)
        }

        //- $.getJSON('/maplayers',function(result){
        //-     $.each(result, function(i, mlayer){
        //-         $.getJSON('/mapjson/' + mlayer.name, function(data) { addLayer(data, mlayer.name ) });
        //-     });
        //- });

        //- function addLayer(layer, name) {
        //-     var leaf_layer;
        //-     if (layer.type == "MultiPoint") {
        //-         leaf_layer = L.geoJson(layer, { pointToLayer: function (feature, latlng) {return L.circleMarker(latlng, layer.style); }})
        //-         leaf_layer.bindPopup(layer.type);
        //-     } else if (layer.type == "MultiLineString") {
        //-         leaf_layer = L.geoJson(layer, {style: layer.style });
        //-         leaf_layer.bindPopup(layer.type);
        //-     } else  {
        //-         leaf_layer = L.geoJson(layer, {
        //-             style: function(feature) {
        //-                 switch (feature.properties.style) {
        //-                 case 'Orange': return {color: "#ff0000"};
        //-                 case 'Blue': return {color: "#0000ff"};
        //-             }
        //-             },
        //-             onEachFeature: function (feature, layer) {
        //-                  layer.bindPopup(feature.properties.name);
        //-              }
        //-          });
        //-     }
        //-     leaf_layer.addTo(map);
            
        //-     $('#' + name).click(function(e) {
                
        //-         if (map.hasLayer(leaf_layer)) {
        //-             map.removeLayer(leaf_layer);
        //-         } else {
        //-             map.addLayer(leaf_layer);
        //-         }
        //-     });
        //- }